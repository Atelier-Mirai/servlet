/*=====================================================================
 未來への飛躍 〜お勧め書籍のご案内〜
=====================================================================*/
わたくしの興味関心を反映して、少し偏りがございますが、皆様の未來への飛躍につながればと、お勧め書籍24冊を選んでみました。お役に立てば幸いです。

/*---------------------------------------------------------------------
Java を学ぶために
---------------------------------------------------------------------*/
* Java[完全]入門 松浦健一郎/司ゆき 著
* 基礎からのサーブレット/JSP 第5版 松浦健一郎/司ゆき 著
推奨度★★☆ 難易度★☆☆
初心者向けに執筆されており、テキストでは少し難しかったという方におすすめ。
色刷りで、ソースコードもダウンロードできます。
ファイル入出力等、テキストでは扱われなかった領域にも触れられています。
関数型プログラミングの章は、テキストが容易だった方にとっても楽しめることでしょう。

/*---------------------------------------------------------------------
 より良いコードを書くために
---------------------------------------------------------------------*/
* リーダブルコード より良いコードを書くためのシンプルで実践的なテクニック
推奨度★★★ 難易度★☆☆
「美しいコードを見ると感動する。優れたコードは見た瞬間に何をしているかが伝わってくる。そういうコードは使うのが楽しいし、自分のコードもそうあるべきだと思わせてくれる。本書の目的は、君のコードを良くすることだ」
名前の付け方、コメントの書き方など表面上の改善について。コードを動かすための制御フロー、論理式、変数などループとロジックについてなど、楽しいイラストと共に説明しています。

* Good Code, Bad Code ～持続可能な開発のためのソフトウェアエンジニア的思考
推奨度★★☆ 難易度★★☆
「よいコード」と「悪いコード」の違いは、どこにあるのでしょうか。プロの「ソフトウェアエンジニア」として、堅牢で信頼性が⾼く、保守しやすく、チームメンバーが理解や適応しやすいコードを作成するための概念と実用的な⼿法を、Googleでテックリードを務める著者が解説しています。
まず「高品質なコードを書く」ために、次の4つのゴールを設定しています。
正しく動くこと / 正しく動作し続けること / 要件の変更に対応しやすいこと / 車輪の再発明をしないこと
　これを達成するための戦略として、「コード品質の6つの柱」（コードを読みやすくする / 想定外の事態をなくす / 誤用しにくいコードを書く / コードをモジュール化する / コードを再利用、汎用化しやすくする / テストしやすいコードを書き、適切にテストする) を提唱、この6つの柱に沿って、ソフトウェアエンジニアとしてコードを書く際のアドバイスが述べられています。
　著者の知識と経験が、具体的かつ実用的に言語化されており、経験3年以内のソフトウェアエンジニアをターゲットとして執筆されていますが、チームで開発を行う際のリファレンスとしても、あるいは経験豊富なエンジニアであっても、自分の経験を整理し、言語化するための便覧としても使えるはずです。そして、チーム開発で、他のエンジニアをメンタリングするための便利なリソースとしても活用できます。

* テスト駆動開発 Kent Beck (著), 和田 卓人 (翻訳)
推奨度★★☆ 難易度★★☆
テスト駆動開発を原点から学ぶ
本書は、自分たちのコードに自信を持って開発を続けたいプログラマ、チームリーダー向けに、テスト駆動開発(TDD)の実践方法を解説した "Test-Driven Development By Example"の日本語版です。テスト駆動開発の考案者であるKent Beck自身によって書かれた原典を、日本におけるテスト駆動開発の第一人者である和田卓人氏が訳しました。
テスト駆動開発とは単にテスト自動化を行うことではなく、ユニットテストとリファクタリングを両輪とした小さいサイクルを回すことで不確実性を制御し、不断の設計進化を可能にする手法であることを、実例を通して学ぶことができます。

* コーディングを支える技術 成り立ちから学ぶプログラミング作法
推奨度★★☆ 難易度★☆☆
本書は、プログラミング言語が持つ各種概念が「なぜ」存在するのかを解説する書籍です。世の中にはたくさんのプログラミング言語があります。そしてプログラミングに関する概念も、関数、型、スコープ、クラス、継承など、さまざまなものがあります。多くの言語で共通して使われる概念もあれば、一部の言語でしか使われない概念もあります。これらの概念は、なぜ生まれたのでしょうか。本書のテーマは、その「なぜ」を理解することです。そのために本書では、言語設計者の視点に立ち、複数の言語を比較し、そして言語がどう変化してきたのかを解説します。いろいろな概念が「なぜ」生まれたのかを理解することで、なぜ使うべきか、いつ使うべきか、どう使うべきかを判断できるようになるでしょう。そして、今後生まれてくる新しい概念も、よりいっそう理解しやすくなることでしょう。

* ［改訂新版］C言語による標準アルゴリズム事典
推奨度★★★ 難易度★☆☆
コンピュータの算法に関わるアルゴリズムの定石、レトリックを可能な限り収録した定番の書。手元に置いておきたい実用的な本が30年弱の時を経て新装改訂版として登場です。
定評をいただいている基本的な内容はそのままに、時代にそぐわなくなっていた部分のみ改訂。これからも末長くご愛顧いただけるようにまとめ直しました。

* プログラマの数学
推奨度★★☆ 難易度★☆☆
プログラミングや数学に関心のある読者を対象に、プログラミング上達に役立つ「数学の考え方」をわかりやすく解説しています。数学的な知識を前提とせず、たくさんの図とパズルを通して、平易な文章で解き明かしています。2進数から人工知能に至るまで、ていねいに説明しています。プログラミングや数学に関心のある読者はいうまでもなく、プログラミング初心者や数学の苦手な人にとっても最良の一冊です。

* みんなのコンピューターサイエンス
推奨度★★☆ 難易度★☆☆
もはやコンピュータなしには生活が立ち行かなくなるレベルにまで到達しつつある現代社会。その圧倒的なパワーを問題解決に援用するためには小手先の知識だけでは追いつきません。かといって行き当たりばったりで、全方位に知識を求めるには、その世界は広大にすぎますし、効率が悪すぎます。本書はコンピュータサイエンスが扱う「基礎」「効率」「戦略」「データ」「アルゴリズム」「データベース」「コンピュータ」「プログラミング」という8つのジャンルにしぼり、そのエッセンスと背景となる考え方を紹介します。
どのジャンルであれ、トップクラスのエンジニアを目指すにはコンピュータサイエンスが不可欠ですが、「どこから手を付ければいいのかわからない」「砂を噛むような分厚い理論書は敬遠したい」というステップアップしたいエンジニアやその予備軍、あるいは現役だけれどももう少しライトに全体像を俯瞰したい学生にも最適な1冊です。

/*---------------------------------------------------------------------
  デザインパターンを学ぶ
---------------------------------------------------------------------*/
* Head First デザインパターン 第2版
推奨度★★☆ 難易度★★☆
本書は、2005年に発刊されて以来、高い人気を誇ってきたロングセラーの改訂版で、初学者、過去に挫折した経験のある方、知識を確固たるものにしたい方を対象に、イラストや写真を使ってやさしく楽しく解説するHead Firstシリーズのデザインパターン編です。
オブジェクト指向プログラミングにおいて、先人たちの知恵と経験の結晶である「デザインパターン」を学ぶことで、頻繁に起こる問題とその対応策を体得し、優れた設計に基づいた信頼性の高いコードを効率的に開発することが可能となります。
GoFの真髄を理解するため、教育心理学に基づきビジュアルを重視したレイアウト、文体、クイズやパズルを随所に盛り込み、飽きることなく読み進められる工夫を凝らしています。

/*---------------------------------------------------------------------
 ドメイン駆動設計を学ぶ
---------------------------------------------------------------------*/
* エリック・エヴァンスのドメイン駆動設計: ソフトウェアの核心にある複雑さに立ち向かう
推奨度★★☆ 難易度★★★
ソフトウェア開発コミュニティでは、ドメインモデリングがソフトウェア設計の中心であることが広く認められてきています。ドメインモデルを通して、ソフトウェア開発者は豊富な機能を表現し、それをユーザの要求に本当の意味で応えるソフトウェアの実装に移すことができます。しかし、明らかに重要であるにもかかわらず、効果的なドメインモデリングをどのようにソフトウェア開発プロセスに組み入れるかを説明する、実用的なリソースはほとんど存在しませんでした。ドメイン駆動設計はこの要求に応えるものです。これは具体的な技術についての本ではなく、読者にドメイン駆動設計への体系的なアプローチを提示するものです。設計のベストプラクティスの応用的なセット、経験に基づくテクニック、さらに、複雑なドメインに直面するソフトウェアプロジェクトにおける開発を容易にする基本原則を紹介する一冊です。

* ドメイン駆動設計をはじめよう ソフトウェアの実装と事業戦略を結びつける実践技法
推奨度★★☆ 難易度★★★
ドメイン駆動設計はエリック・エヴァンスにより提唱されたソフトウェア開発の概念です。対象とする事業活動（ドメイン）とその課題の観点から、より良いソフトウェアを構築するために関係者が協力する方法を提供します。本書は4部構成になっており、第I部「設計の基本方針」では、ソフトウェアの設計方針を大きな視点から決めるための考え方とやり方を取り上げます。第Ⅱ部「実装方法の選択」ではソースコードに焦点を合わせ、業務ロジックをどう実装するかの選択肢を学びます。第Ⅲ部「ドメイン駆動設計の実践」では、ソフトウェア開発の現場にドメイン駆動設計を実践的に取り入れるための方法を紹介します。第IV部「他の方法論や設計技法との関係」では、ドメイン駆動設計とそれ以外の方法論や設計技法との関係を検討します。最新の技術トレンドを取り入れながら、ドメイン駆動設計の基本概念と実践方法をわかりやすく解説します。

/*---------------------------------------------------------------------
 読みもの - より良く生きるために
---------------------------------------------------------------------*/
* 達人プログラマー 熟達に向けたあなたの旅
推奨度★★★ 難易度★☆☆
本書は、より効率的、そしてより生産的なプログラマーになりたいと願うソフトウェア開発者に向けて、アジャイルソフトウェア開発手法の先駆者として知られる二人により執筆されました。経験を積み、生産性を高め、ソフトウェア開発の全体をより良く理解するための、実践的なアプローチが解説されています。
先見性と普遍性に富んだ本書は、入門者には手引きとなり、ベテランでも読み直すたびに得るものがある、座右の一冊です。

* 情熱プログラマー ソフトウェア開発者の幸せな生き方
推奨度★★☆ 難易度★☆☆
本書は、等身大のプログラマの一人がキャリア開発の重要性を説き、そのための心構えなどを示したもの。「プログラマはビジネス視点を持って意識的なキャリア開発をすべき」という視点から、その実践方法を著者独特の生き生きとした共感できる語り口で伝える。

* ハッカーと画家 コンピュータ時代の創造者たち
推奨度★★☆ 難易度★☆☆
大成功ベンチャーの創業者にして天才プログラマの著者が語る、これからの時代を見通す考え方と創造のセンス。本書の著者Paul Grahamは、LISPプログラミングの達人であると同時に、後のYahoo！Storeとなるソフトウェアを作り、ベンチャー創業者として大きな成功を収めたことで知られる。本書でGrahamは、コンピュータが大きな役割を担う時代において、いかに発想を広げ、美しいものを設計し作り上げるかを、さまざまな切り口から大胆に考察している。インターネット上で大きな話題となったエッセイを書籍化。

* プログラマが知るべき97のこと
推奨度★★☆ 難易度★☆☆
人々のさまざまな思いを技術で形にするプログラマ。本書は世界中で活躍するプログラマによる97本のエッセイを収録した書籍です。プログラミングにおいてもっとも重要な事柄は何か、バージョン管理やテスティング、設計原則とコーディングテクニック、また腕を磨くための勉強法などについて、経験豊かなプログラマが自らの体験を踏まえて解説します。プログラマを勇気づけ、新たな気づきをもたらす一冊です。
日本語版では、小飼弾、関将俊、舘野祐一、まつもとゆきひろ、宮川達彦、森田創、吉岡弘隆、和田卓人による10本の書下ろしを収録。

* プロジェクト・マネジャーが知るべき97のこと
推奨度★★☆ 難易度★☆☆
プロジェクトの様々な局面で意思決定を迫られるプロジェクト・マネジャー。本書は世界中で活躍するプロジェクト・マネジャーによる97本のエッセイを収録した書籍です。
ソフトウェア開発においてマネジャーに求められることは何か、人とチーム、さらにステークホルダーの管理、プロジェクトプロセスやプロジェクト要求、契約、国際化への対応と地理的に分散したチームの管理などについて、経験豊かなプロジェクト・マネジャーが自らの体験を踏まえて解説します。プロジェクト・マネジャーを勇気づけ、新たな気づきをもたらす一冊です。
日本語版には、奥沢薫、神庭弘年、重木昭信、芝尾芳昭、冨永章、初田賢司、林衛による11本の書き下ろしを収録。

* ソフトウェアアーキテクトが知るべき97のこと
推奨度★★☆ 難易度★☆☆
ビジネスとプログラム両方の知識と経験が求められるソフトウェアアーキテクト。本書は世界中で活躍するソフトウェアアーキテクトによる97本のエッセイを収録した書籍です。プロジェクトにおいてもっとも重要な事柄とは何か、顧客やチーム、またコーディングやスケジュールなどについて、経験豊かなアーキテクトが自らの体験を踏まえて解説します。ソフトウェアアーキテクトを勇気づけ、新たな気づきをもたらす一冊です。日本語版では、伊藤直也、江島健太郎、小野和俊、榊原彰、鈴木雄介、萩本順三、萩原正義、牧野友紀による11本の書下ろしを収録。

* ソフトウェア開発現場の「失敗」集めてみた。 42の失敗事例で学ぶチーム開発のうまい進めかた
推奨度★★★ 難易度★☆☆
ソフトウェア開発は、どんなときも順調に進むとは限りません。チームで開発を進めるエンジニアたちは、開発の足を止める「落とし穴」の数々と向き合わなければなりません。
「いつのまにか機能が肥大化していて、手がつけられなくなった…」
「仕様がまったく共有されていないまま、開発が進んでいた…」
「ちょっとしたコード変更が一日分の工数を奪った…」
本書は、このような落とし穴にハマってしまった開発現場の「失敗エピソード」を面白おかしく紹介する、失敗事例集です。事例は架空の開発現場を舞台にしたフィクションですが、著者自らが体験した経験をベースに構成しているので、臨場感たっぷり。読んでいるだけで冷や汗が浮かびます。
また、失敗につながる落とし穴を回避したり、抜け出すための方法も解説しています。新しく開発チームを率いることになった新任リーダーや、チームで開発に取り組むエンジニアが、失敗に直面した際にどのようなアクションを起こせばよいか、現場で役立つ具体策がわかります。
エピソードは「企画」「要件定義」「実装」「品質管理」といった開発の工程別に42篇を収録。各エピソードの冒頭には、4コマ漫画を掲載しているので、楽しく読み進められます。

/*---------------------------------------------------------------------
 資格取得のために
---------------------------------------------------------------------*/
* キタミ式イラストIT塾 応用情報技術者
推奨度★★☆ 難易度★☆☆
可愛いイラストでとてもわかりやすい解説を行っているため、試験範囲が広く、かつ深い理解度が必要とされる応用情報技術者試験にとって、「試験範囲の内容をひととおり理解する」ことができる書籍です。

* 情報処理教科書 データベーススペシャリスト 翔泳社
* 情報処理教科書 ネットワークスペシャリスト 翔泳社
* 情報処理教科書 エンベデッドスペシャリスト 翔泳社
* 情報処理教科書 プロジェクトマネージャー 翔泳社
推奨度★★☆ 難易度★★☆
定評ある参考書です。毎年春と秋に受検できます。

/*=====================================================================
 お役立ちウェブサイト
=====================================================================*/
おまけとして、お役立ちサイトのご紹介です。

* タイピングクラブ
音声入力も実用化されましたが、プログラミングや各種文書作成等、まだまだタイピングする機会は多いものです。円滑にキーボードから文字入力できると効果的です。
[Typing Lessons](https://www.typing.com/student/lessons)
「Ｆ」「Ｊ」のホームポジションから始まり、数字や記号に至るまで滑らかに入力できるよう練習できるサイトです。

* ウェブ技術習得のための総合サイト ＭＤＮ
HTML / CSS / JavaScript 等に関する開発者向けの技術情報が集約されているサイトです。詳しい説明や使用例等も紹介されており、また各種チュートリアルも学習に役立ちます。
[ウェブ入門](https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web)
